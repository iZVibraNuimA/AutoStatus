from vk_api import VkApi

from traceback import format_exc

from time import sleep

from datetime import datetime, timedelta, timezone

from python3_anticaptcha import ImageToTextTask, AntiCaptchaControl

from config import TOKEN_CAPT, TOKEN_OWM

from pyowm import OWM

from pyowm.utils.config import get_default_config




acc = AntiCaptchaControl.AntiCaptchaControl(TOKEN_CAPT)

class Console:
    @staticmethod
    def log(message, sender="SYSTEM"):
        """
        –í—ã–≤–æ–¥ –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å. –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª logs.txt
        """
        time = datetime.now().strftime("%H:%M:%S")
        date = datetime.now().strftime("%d.%m.%y")
        if sender == "ERROR":
            line = format_exc().split(", line ")[1].split(",")[0]
            msg = f"{date} | ({time}) [ERROR] >> {message} (line {line})"
        else:
            msg = f"{date} | ({time}) [{sender}] >> {message}"
        print(msg)
        with open("logs.txt", "a", encoding="utf-8") as file:
            file.write(f"{msg}\n")

class User:
    def __init__(self, token) -> None:
        """
        –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            self.session = VkApi(
                token=token,
                captcha_handler=self.solver
            )
        except Exception as AuthError:
            Console.log(f"–û—à–∏–±–∫–∞ –≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {AuthError}")
        else:
            Console.log("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")

    def solver(self, captcha):
        """
        –†–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ
        """
        answer = ImageToTextTask(TOKEN_CAPT).captcha_handler(captcha.get_url())
        Console.log("–ö–∞–ø—á–∞ –í–∫–æ–Ω—Ç–∞–∫—Ç–µ —Ä–µ—à–µ–Ω–∞")
        return captcha.try_again(answer['solution']['text'])

    def set_status(self, status: str, group_id: None):
        '''
        params: status - –í–∞—à —Å—Ç–∞—Ç—É—Å
        params: group_id - –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–µ–Ω—è—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ, –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ —É–∫–∞–∑—ã–≤–∞–µ–º 0
                    –ü—Ä–∏–º–µ—Ä group_id  -1111111111
        '''
        status = self.session.method(
            'status.set', {
                'text' : status,
                'group_id' : group_id

            }
        )

        return status

    def stiker(self):
        '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
        '''
        get_stik = self.session.method(
            'store.getProducts', {
                'type' : 'stickers',
                'filters' : 'purchased'
            }
        )
        
        return get_stik['count']
    

    def followers(self, user_id: int):
        '''
        params user_id: —É–∫–∞–∑—ã–≤–∞–µ–º –∞–π–¥–∏ —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ MAX 1000 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        '''
        folower = self.session.method(
            'users.getFollowers', {
                'user_id' : user_id
            }
        )

        return folower['count']
    
    def get_count_msg(self, filters : str):
        '''
        params filters: all - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        unread - —Ç–æ–ª—å–∫–æ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã–µ
        '''
        count = self.session.method(
            'messages.getConversations', {
                #'count': count,
                'filter': filters
            }
        )

        return count

    def get_like(self, types: str, item_id: int):
        
        '''
        type:
            string

            –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞. –í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã:



            ‚Ä¢
            post ‚Äî –∑–∞–ø–∏—Å—å –Ω–∞ —Å—Ç–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.

            ‚Ä¢
            post_ads ‚Äî —Ä–µ–∫–ª–∞–º–Ω–∞—è –∑–∞–ø–∏—Å—å.

            ‚Ä¢
            comment ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å—Ç–µ–Ω–µ.

            ‚Ä¢
            photo ‚Äî —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è.

            ‚Ä¢
            video ‚Äî –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å.

            ‚Ä¢
            note ‚Äî –∑–∞–º–µ—Ç–∫–∞.

            ‚Ä¢
            market ‚Äî —Ç–æ–≤–∞—Ä.

            ‚Ä¢
            photo_comment ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.

            ‚Ä¢
            video_comment ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏.

            ‚Ä¢
            topic_comment ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏.

            ‚Ä¢
            market_comment ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–æ–≤–∞—Ä—É.

            item_id: 
                int
                –£–∫–∞–∑—ã–≤–∞–µ–º ID —Ç–æ–≥–æ –æ—Ç –∫—É–¥–∞ —Å—á–∏—Ç–∞—Ç—å –ª–∞–π–∫–∏
        '''

        like = self.session.method(
            'likes.getList', {
                'type' : types,
                'item_id' : item_id
            }
        )

        return like['count']

    def gifts(self, user_id):
        '''
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤
        '''
        gift = self.session.method(
            'gifts.get', {
                'user_id' : user_id
            }
        )
        
        return gift['count']
    
    def get_black_list(self):
        '''
        
        '''
        blacklist = self.session.method(
            'account.getBanned'
        )

        return blacklist['count']


pic = [
    "0‚É£","1‚É£","2‚É£","3‚É£","4‚É£","5‚É£","6‚É£","7‚É£","8‚É£","9‚É£"
    ]

def times(hours, minutes):
    while True:
        timezn = timedelta(hours=hours, minutes=minutes)
        times = (datetime.now(timezone.utc) + timezn)
        timeset = times.strftime('%H:%M')
        time_nower = ""
        time_nower += pic[int(timeset[0])]
        time_nower += pic[int(timeset[1])]
        time_nower += ":"
        time_nower += pic[int(timeset[3])]
        time_nower += pic[int(timeset[4])]
        sleep(1)
        return time_nower

def weather(hours: float, minutes:float, gorod:str):
    '''
    params hours
    params minutes
    –£–∫–∞—ã–≤–∞–µ—Ç—Å—è —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

    params gorod:
        –£–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥
    '''
    timers = times(hours, minutes)
    config_dict = get_default_config()
    config_dict['language'] = 'ru'
    owm = OWM(TOKEN_OWM, config_dict)   
    mgr = owm.weather_manager()
    gorod = gorod
    search = mgr.weather_at_place(gorod).weather
    temp = search.temperature("celsius")['temp']
    return f'{gorod} \nüå°: {temp}¬∞C \nüïê: {timers}'

def solvers():
    '''
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∞–Ω—Ç–∏–∫–∞–ø—á–∏
    '''
    money_balance = acc.get_balance()['balance']

    return money_balance

print(solvers())